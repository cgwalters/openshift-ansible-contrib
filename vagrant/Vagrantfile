# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'socket'

hostname = Socket.gethostname
localmachineip = IPSocket.getaddress(Socket.gethostname)
puts %Q{ This machine has the IP '#{localmachineip} and host name '#{hostname}'}

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = '2'

deployment_type = ENV['DEPLOYMENT_TYPE'] || 'origin'
origin_os = ENV['ORIGIN_OS'] || 'centos'
rhsm_pool = ENV['RHSM_POOL'] || 'Employee SKU'
sync_type = ENV['SYNC_TYPE'] || ''

REQUIRED_PLUGINS = %w(vagrant-hostmanager)
SUGGESTED_PLUGINS = %w(vagrant-sshfs landrush)

def message(name)
  "#{name} plugin is not installed, run `vagrant plugin install #{name}` to install it."
end

SUGGESTED_PLUGINS.each { |plugin| print("note: " + message(plugin) + "\n") unless Vagrant.has_plugin?(plugin) }

if deployment_type == 'openshift-enterprise'
  REQUIRED_PLUGINS.push('vagrant-registration')
end

errors = []

# Validate and collect error message if plugin is not installed
REQUIRED_PLUGINS.each { |plugin| errors << message(plugin) unless Vagrant.has_plugin?(plugin) }
unless errors.empty?
  msg = errors.size > 1 ? "Errors: \n* #{errors.join("\n* ")}" : "Error: #{errors.first}"
  fail Vagrant::Errors::VagrantError.new, msg
end

if sync_type == ''
  if Vagrant.has_plugin?('vagrant-sshfs')
    sync_type = 'sshfs'
  else
    sync_type = 'rsync'
  end
end

# Here, we parse the ORIGIN_OS environment variable.
# First, if we're using OSE, that's only supported on RHEL.
# Otherwise, we mostly handle a subset of Atlas identifiers,
# except for centos/7/atomic/alpha which isn't on Atlas right now.
override_box_url = ''
if deployment_type == 'openshift-enterprise'
  box_name = 'rhel/7.2'
elsif ['centos', 'centos/7'].include? origin_os
  box_name = 'centos/7'
elsif ['centos/7/atomic', 'centos/atomic-host'].include? origin_os
  box_name = 'centos/atomic-host'
elsif ['centos/7/atomic/alpha'].include? origin_os
  box_name = 'centos/7/atomic/alpha'
  # This one gets templated by the provider manually
  override_box_url = 'https://ci.centos.org/artifacts/sig-atomic/centos-continuous/images-alpha/cloud/latest/images/centos-atomic-host-7-vagrant-%s.box'
elsif ['fedora', 'fedora/25/cloud', 'fedora/25-cloud-base'].include? origin_os
  box_name = 'fedora/25-cloud-base'
elsif ['fedora/25-atomic-host', 'fedora/25/atomic'].include? origin_os
  box_name = 'fedora/25-atomic-host'
else
  fail Vagrant::Errors::VagrantError.new, "Unknown origin_os: " + origin_os
end

NETWORK_BASE = '192.168.50'
INTEGRATION_START_SEGMENT = 20

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

#  if Vagrant.has_plugin?("vagrant-cachier")
#    config.cache.scope = :machine
#  end

  # Work around interaction bug with vagrant-hostmanager
  config.ssh.keep_alive = false

  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.ignore_private_ip = false
#  config.hostmanager.include_offline = true

  if Vagrant.has_plugin?('landrush')
    config.landrush.enabled = true
    config.landrush.tld = 'example.com'
    config.landrush.guest_redirect_dns = false
  end

  if deployment_type == 'openshift-enterprise'
    # vagrant-registration
    if ENV.has_key?('SUB_USERNAME') && ENV.has_key?('SUB_PASSWORD')
      config.registration.username = ENV['SUB_USERNAME']
      config.registration.password = ENV['SUB_PASSWORD']
    end

    # Proxy Information from environment
    config.registration.proxy = PROXY = (ENV['PROXY'] || '')
    config.registration.proxyUser = PROXY_USER = (ENV['PROXY_USER'] || '')
    config.registration.proxyPassword = PROXY_PASSWORD = (ENV['PROXY_PASSWORD'] || '')
    config.registration.auto_attach = true
  end

  config.vm.provider "virtualbox" do |v, override|
    #v.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate//vagrant","1"]
    v.memory = 1024
    v.cpus = 1
    override.vm.box = box_name
    provider_name = 'virtualbox'
    if override_box_url
      override.vm.box_url = override_box_url % provider_name
    end
  end

  config.vm.provider "libvirt" do |libvirt, override|
    libvirt.cpus = 1
    libvirt.memory = 1024
    libvirt.driver = 'kvm'
    override.vm.box = box_name
    provider_name = 'libvirt'
    if override_box_url
      override.vm.box_url = override_box_url % provider_name
    end
  end

  # Suppress the default sync in both CentOS base and CentOS Atomic Host
  config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.synced_folder '.', '/home/vagrant/sync', disabled: true

  config.vm.define "master1" do |master1|
    master1.vm.network :private_network, ip: "#{NETWORK_BASE}.#{INTEGRATION_START_SEGMENT}"
    master1.vm.hostname = "master1.example.com"
    master1.hostmanager.aliases = %w(master1)
    master1.vm.provider "libvirt" do |libvirt, override|
      libvirt.cpus = 2
      libvirt.memory = 2048
    end
  end

  config.vm.define "node1" do |node1|
    node1.vm.network :private_network, ip: "#{NETWORK_BASE}.#{INTEGRATION_START_SEGMENT + 1}"
    node1.vm.hostname = "node1.example.com"
    node1.hostmanager.aliases = %w(node1)
  end

  config.vm.define "node2" do |node2|
    node2.vm.network :private_network, ip: "#{NETWORK_BASE}.#{INTEGRATION_START_SEGMENT + 2}"
    node2.vm.hostname = "node2.example.com"
    node2.hostmanager.aliases = %w(node2)
  end

  config.vm.define "admin1" do |admin1|
    admin1.vm.network :private_network, ip: "#{NETWORK_BASE}.#{INTEGRATION_START_SEGMENT + 3}"
    admin1.vm.hostname = "admin1.example.com"
    admin1.hostmanager.aliases = %w(admin1)

    if deployment_type == 'openshift-enterprise'
      config_playbook = "/usr/share/ansible/openshift-ansible/playbooks/byo/config.yml"
    else
      config_playbook = "/home/vagrant/openshift-ansible/playbooks/byo/config.yml"
    end

    admin1.vm.synced_folder "..", "/var/home/vagrant/sync", type: sync_type
    admin1.vm.synced_folder ".vagrant", "/var/home/vagrant/.hidden", type: sync_type

    admin1.vm.provision "shell", inline: "/usr/bin/bash /var/home/vagrant/sync/vagrant/admin/provision"
  end
end
